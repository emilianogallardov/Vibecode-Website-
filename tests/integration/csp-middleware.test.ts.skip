import { describe, it, expect, vi } from 'vitest';
import { NextRequest } from 'next/server';

// Mock NextAuth
vi.mock('../../auth', () => ({
  auth: (callback: any) => callback,
}));

// Mock the CSP module
vi.mock('@/lib/csp', () => ({
  generateNonce: () => 'test-nonce-123',
  buildCSP: (nonce: string) => `script-src 'nonce-${nonce}'`,
}));

describe('CSP Middleware Integration', () => {
  it('should generate and include nonce in headers', async () => {
    // Import middleware after mocking
    const middlewareModule = await import('../../middleware');
    const middleware = middlewareModule.default;

    const request = new NextRequest('http://localhost:3000/');
    const response = await middleware(request);

    // Check that CSP header is set
    const csp = response.headers.get('Content-Security-Policy');
    expect(csp).toBeTruthy();
    expect(csp).toContain('nonce-test-nonce-123');
  });

  it('should set x-nonce header for server components', async () => {
    const middlewareModule = await import('../../middleware');
    const middleware = middlewareModule.default;

    const request = new NextRequest('http://localhost:3000/');
    const response = await middleware(request);

    // The response should have modified request headers
    expect(response).toBeTruthy();
  });

  it('should set all security headers', async () => {
    const middlewareModule = await import('../../middleware');
    const middleware = middlewareModule.default;

    const request = new NextRequest('http://localhost:3000/');
    const response = await middleware(request);

    expect(response.headers.get('X-Frame-Options')).toBe('DENY');
    expect(response.headers.get('X-Content-Type-Options')).toBe('nosniff');
    expect(response.headers.get('X-XSS-Protection')).toBe('1; mode=block');
    expect(response.headers.get('Referrer-Policy')).toBe('strict-origin-when-cross-origin');
    expect(response.headers.get('Permissions-Policy')).toBe('camera=(), microphone=(), geolocation=()');
  });

  it('should apply to all routes except static files', async () => {
    const middlewareModule = await import('../../middleware');
    const middleware = middlewareModule.default;

    const routes = [
      { url: 'http://localhost:3000/', shouldApply: true },
      { url: 'http://localhost:3000/blog', shouldApply: true },
      { url: 'http://localhost:3000/api/contact', shouldApply: true },
    ];

    for (const { url, shouldApply } of routes) {
      const request = new NextRequest(url);
      const response = await middleware(request);

      if (shouldApply) {
        expect(response.headers.get('Content-Security-Policy')).toBeTruthy();
      }
    }
  });
});
